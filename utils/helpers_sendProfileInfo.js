function escapeHTML(str) {
    if (typeof str !== 'string') return '';
    return str.replace(/[&<>"]/g, (tag) => {
      const charsToReplace = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;'
      };
      return charsToReplace[tag] || tag;
    });
  }
  
  async function sendUserProfileInfo(bot, userId, user, showLikeButton = false, likeUserId = null) {
    let response = `<b>üë§ @${escapeHTML(user.username) || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n`;
    response += `<b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${user.age}\n`;
    response += `<b>–ü–æ–ª:</b> ${user.gender}\n`;
    response += `<b>–ò–≥—Ä—ã –∏ —Ä–∞–Ω–≥–∏:</b>\n`;
    if (user.gameRanks && user.gameRanks.length > 0) {
      user.gameRanks.forEach((gr) => {
        response += `‚Ä¢ ${gr.game}: ${gr.rank || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      });
    } else {
      response += '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–∞—Ö –∏ —Ä–∞–Ω–≥–∞—Ö.\n';
    }
    response += `<b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> ${user.playTime.join(', ')}\n`;
    response += `<b>–Ø–∑—ã–∫:</b> ${user.language.join(', ')}\n`;
    response += `<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ${user.timeZone}\n`;
    response += `<b>–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è:</b> ${user.communicationTool.join(', ')}\n`;
  
    let extra = { parse_mode: 'HTML' };
    if (showLikeButton && likeUserId) {
      extra.reply_markup = {
        inline_keyboard: [
          [{ text: '–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø—Ä–æ—Ñ–∏–ª—å', callback_data: `like_profile_${likeUserId}` }]
        ]
      };
    }
  
    await bot.telegram.sendMessage(userId, response, extra);
  }
  
  module.exports = { sendUserProfileInfo, escapeHTML };
  